from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from keyboards import learning_words_kb, learning_words_after_the_response_kb
from utils.states import LearningNewWordState

router = Router(name=__name__)


@router.message(F.text == "üìù –£—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞")
async def learning_new_words(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(LearningNewWordState.en_correct)
    await state.update_data(en_correct="cat")
    await state.set_state(LearningNewWordState.ru_correct)
    await state.update_data(ru_correct="–∫–æ—à–∫–∞")
    await state.set_state(LearningNewWordState.incorrect)
    await state.update_data(incorrect={"dog": "—Å–æ–±–∞–∫–∞", "hello": "–ø—Ä–∏–≤–µ—Ç", "goodbye": "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"})
    words = {
        'cat': '–∫–æ—à–∫–∞',
        'dog': '—Å–æ–±–∞–∫–∞',
        'hello': '–ø—Ä–∏–≤–µ—Ç',
        'goodbye': '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è'
    }
    kb = await learning_words_kb(prefix="new_", words=words)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥:", reply_markup=kb)


@router.callback_query(F.data.startswith("new_"), StateFilter(LearningNewWordState))
async def learning_new_words(callback: CallbackQuery, state: FSMContext):
    words = await state.get_data()
    kb = await learning_words_after_the_response_kb()
    if callback.data.replace("new_", "") == words['ru_correct']:
        await callback.message.edit_text(
            f"–í–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {words['ru_correct']}",
            reply_markup=kb)
    else:
        await callback.message.edit_text(
            f"–ù–µ –≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {words['ru_correct']}",
            reply_markup=kb)


@router.callback_query(F.data.startswith("answer_"))
async def answer_to_the_choice(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(LearningNewWordState.en_correct)
    await state.update_data(en_correct="cat")
    await state.set_state(LearningNewWordState.ru_correct)
    await state.update_data(ru_correct="–∫–æ—à–∫–∞")
    await state.set_state(LearningNewWordState.incorrect)
    await state.update_data(incorrect={"dog": "—Å–æ–±–∞–∫–∞", "hello": "–ø—Ä–∏–≤–µ—Ç", "goodbye": "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"})
    words = {
        'cat': '–∫–æ—à–∫–∞',
        'dog': '—Å–æ–±–∞–∫–∞',
        'hello': '–ø—Ä–∏–≤–µ—Ç',
        'goodbye': '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è'
    }
    kb = await learning_words_kb(prefix="new_", words=words)
    if callback.data.replace("answer_", "") == "finish":
        await state.clear()
        return await callback.message.edit_text("–•–æ—Ä–æ—à–æ –ø–æ–∑–∞–Ω–∏–º–∞–ª–∏—Å—å!", reply_markup=None)
    elif callback.data.replace("answer_", "") == "remember":
        await callback.answer("–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å")

    else:
        await callback.answer("–°–ª–æ–≤–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —Å–Ω–æ–≤–∞")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥:", reply_markup=kb)
